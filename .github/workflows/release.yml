name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual release)'
        type: boolean
        default: true
        required: true

permissions:
  contents: write
  packages: write
  id-token: write # needed for SLSA provenance

jobs:
  goreleaser:
    uses: ./.github/workflows/goreleaser-dry-run.yml
    with:
      dry_run: ${{ github.event.inputs.dry_run == 'true' }}
    secrets:
      inherit

  # These steps are specific to workflow_dispatch runs, so we add them as a separate job
  setup-test-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create testing tag
        run: |
          git config --local user.email "test@example.com"
          git config --local user.nameÂ F "Test Release Bot"
          echo "RELEASE_TAG=v0.0.0-test-$(date +%s)" >> $GITHUB_ENV
          git tag $RELEASE_TAG

  cleanup-test-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
    needs: [goreleaser]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean up test tag
        run: |
          git tag -d $RELEASE_TAG || true
        env:
          RELEASE_TAG: ${{ needs.setup-test-tag.outputs.RELEASE_TAG }}

  goreleaser-hashes:
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: github.event.inputs.dry_run != 'true'
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - name: Generate hashes for provenance
        id: hash
        env:
          ARTIFACTS: "${{ needs.goreleaser.outputs.artifacts }}"
        run: |
          echo "hashes=$(echo $ARTIFACTS | jq -r '.[] | select(.type=="Binary") | .path' | sha256sum | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    needs: [goreleaser-hashes]
    if: github.event.inputs.dry_run != 'true'
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.goreleaser-hashes.outputs.hashes }}"
      upload-assets: true

  verification:
    needs: [goreleaser, provenance]
    if: github.event.inputs.dry_run != 'true'
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.0

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "*.tar.gz"
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$PROVENANCE"

      - name: Verify assets
        env:
          CHECKSUMS: ${{ needs.goreleaser-hashes.outputs.hashes }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          checksums=$(echo "$CHECKSUMS" | base64 -d)
          slsa-verifier verify-artifact \
            --provenance-path "$PROVENANCE" \
            --source-uri "github.com/$GITHUB_REPOSITORY" \
            --source-tag "$GITHUB_REF_NAME"
