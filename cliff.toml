[changelog]
# Changelog header
header = """
All notable changes to this project will be documented in this file.\n
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# Template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}
{% for commit in commits %}
- {% if commit.breaking %}**BREAKING**: {% endif %}{{ commit.message }}{% if commit.id %} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }})){% endif %}
{% endfor %}
{% endfor %}\n
"""
# Template for changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Remove the leading and trailing whitespace from the templates
trim = true

[git]
# Parse the commits based on the conventional commits specification
conventional_commits = true
# Filter out the commits that are not conventional
filter_unconventional = true
# Process each line of a commit as an individual commit
split_commits = false
# Filter out commits that didn't change any files
filter_empty = true
# Glob patterns for matching commits that should be filtered out
filter_commits = []
# Regular expression for skipping tags
skip_tags = "beta|alpha|test"
# Regular expression for ignoring tags
ignore_tags = ""
# Sort the tags topologically
topo_order = false
# Include references
include_refs = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[components]
# Create a section for commits with breaking changes
# Types for conventional commits
types = [
    { type = "feat", group = "Features" },
    { type = "fix", group = "Bug Fixes" },
    { type = "perf", group = "Performance" },
    { type = "refactor", group = "Refactor" },
    { type = "style", group = "Styling" },
    { type = "test", group = "Testing" },
    { type = "docs", group = "Documentation" },
    { type = "build", group = "Build" },
    { type = "ci", group = "CI" },
    { type = "chore", group = "Chore" },
]
